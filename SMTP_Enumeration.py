import socket
import time
import statistics

# SMTP server configuration
SMTP_SERVER = 'mail.server.com'
SMTP_PORT = 25

# List of users and domains to check
users = [
    'valid_user',
    'invalid_user',
    'test',
    'service',
    'noreply',
    'unknown',
    'info',
    'noc',
    'soc'
]

domains = [
    'server.com',
]

# Number of tests per email address
TEST_COUNT = 10

# Thresholds for timing attack detection
VALID_TIME_THRESHOLD = 0.6
INVALID_TIME_THRESHOLD = 0.5

# Lists to store valid and invalid email addresses
valid_emails = []
invalid_emails = []

# Function to send commands and capture response time
def send_smtp_command(sock, command):
    sock.send(command.encode())
    return sock.recv(1024).decode()

# Timing attack detection for each combination of user and domain
for user in users:
    for domain in domains:
        email = f'{user}@{domain}'
        times = []
        responses = []
        print(f"Measuring response times for {email}...")
        
        for i in range(TEST_COUNT):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((SMTP_SERVER, SMTP_PORT))
            
            send_smtp_command(sock, 'HELO fingonlab.tech\r\n')
            send_smtp_command(sock, 'MAIL FROM:<test@fingonlab.tech>\r\n')
            
            start_time = time.time()
            response = send_smtp_command(sock, f'RCPT TO:<{email}>\r\n')
            end_time = time.time()
            
            times.append(end_time - start_time)
            responses.append(response)
            
            send_smtp_command(sock, 'QUIT\r\n')
            sock.close()
            time.sleep(3)
        
        avg_time = statistics.mean(times)
        print(f"Average response time for {email}: {avg_time:.4f} seconds")
        
        if avg_time > VALID_TIME_THRESHOLD:
            print(f"\033[92mResult: {email} is likely valid.\033[0m")  # Green for valid email
            valid_emails.append(email)
        elif avg_time < INVALID_TIME_THRESHOLD:
            print(f"\033[91mResult: {email} is likely invalid.\033[0m")  # Red for invalid email
            invalid_emails.append(email)
        else:
            print(f"Result: {email} could not be clearly classified.")

        print("-" * 50)

# Output of all valid and invalid email addresses
print("\nValid E-Mail Addresses:")
for email in valid_emails:
    print(f"\033[92m{email}\033[0m")

print("\nInvalid E-Mail Addresses:")
for email in invalid_emails:
    print(f"\033[91m{email}\033[0m")
